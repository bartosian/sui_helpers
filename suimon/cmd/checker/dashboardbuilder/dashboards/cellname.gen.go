// Code generated by "enumer -type=CellName -json -transform=snake-upper -output=./cellname.gen.go"; DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CellNameName = "CELL_NAME_STATUSCELL_NAME_ADDRESSCELL_NAME_TRANSACTIONS_PER_SECONDCELL_NAME_TOTAL_TRANSACTIONSCELL_NAME_LATEST_CHECKPOINTCELL_NAME_HIGHEST_CHECKPOINTCELL_NAME_CONNECTED_PEERSCELL_NAME_TX_SYNC_PROGRESSCELL_NAME_CHECK_SYNC_PROGRESSCELL_NAME_UPTIMECELL_NAME_VERSIONCELL_NAME_COMMITCELL_NAME_COMPANYCELL_NAME_COUNTRY"

var _CellNameIndex = [...]uint16{0, 16, 33, 66, 94, 121, 149, 174, 200, 229, 245, 262, 278, 295, 312}

const _CellNameLowerName = "cell_name_statuscell_name_addresscell_name_transactions_per_secondcell_name_total_transactionscell_name_latest_checkpointcell_name_highest_checkpointcell_name_connected_peerscell_name_tx_sync_progresscell_name_check_sync_progresscell_name_uptimecell_name_versioncell_name_commitcell_name_companycell_name_country"

func (i CellName) String() string {
	if i < 0 || i >= CellName(len(_CellNameIndex)-1) {
		return fmt.Sprintf("CellName(%d)", i)
	}
	return _CellNameName[_CellNameIndex[i]:_CellNameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CellNameNoOp() {
	var x [1]struct{}
	_ = x[CellNameStatus-(0)]
	_ = x[CellNameAddress-(1)]
	_ = x[CellNameTransactionsPerSecond-(2)]
	_ = x[CellNameTotalTransactions-(3)]
	_ = x[CellNameLatestCheckpoint-(4)]
	_ = x[CellNameHighestCheckpoint-(5)]
	_ = x[CellNameConnectedPeers-(6)]
	_ = x[CellNameTXSyncProgress-(7)]
	_ = x[CellNameCheckSyncProgress-(8)]
	_ = x[CellNameUptime-(9)]
	_ = x[CellNameVersion-(10)]
	_ = x[CellNameCommit-(11)]
	_ = x[CellNameCompany-(12)]
	_ = x[CellNameCountry-(13)]
}

var _CellNameValues = []CellName{CellNameStatus, CellNameAddress, CellNameTransactionsPerSecond, CellNameTotalTransactions, CellNameLatestCheckpoint, CellNameHighestCheckpoint, CellNameConnectedPeers, CellNameTXSyncProgress, CellNameCheckSyncProgress, CellNameUptime, CellNameVersion, CellNameCommit, CellNameCompany, CellNameCountry}

var _CellNameNameToValueMap = map[string]CellName{
	_CellNameName[0:16]:         CellNameStatus,
	_CellNameLowerName[0:16]:    CellNameStatus,
	_CellNameName[16:33]:        CellNameAddress,
	_CellNameLowerName[16:33]:   CellNameAddress,
	_CellNameName[33:66]:        CellNameTransactionsPerSecond,
	_CellNameLowerName[33:66]:   CellNameTransactionsPerSecond,
	_CellNameName[66:94]:        CellNameTotalTransactions,
	_CellNameLowerName[66:94]:   CellNameTotalTransactions,
	_CellNameName[94:121]:       CellNameLatestCheckpoint,
	_CellNameLowerName[94:121]:  CellNameLatestCheckpoint,
	_CellNameName[121:149]:      CellNameHighestCheckpoint,
	_CellNameLowerName[121:149]: CellNameHighestCheckpoint,
	_CellNameName[149:174]:      CellNameConnectedPeers,
	_CellNameLowerName[149:174]: CellNameConnectedPeers,
	_CellNameName[174:200]:      CellNameTXSyncProgress,
	_CellNameLowerName[174:200]: CellNameTXSyncProgress,
	_CellNameName[200:229]:      CellNameCheckSyncProgress,
	_CellNameLowerName[200:229]: CellNameCheckSyncProgress,
	_CellNameName[229:245]:      CellNameUptime,
	_CellNameLowerName[229:245]: CellNameUptime,
	_CellNameName[245:262]:      CellNameVersion,
	_CellNameLowerName[245:262]: CellNameVersion,
	_CellNameName[262:278]:      CellNameCommit,
	_CellNameLowerName[262:278]: CellNameCommit,
	_CellNameName[278:295]:      CellNameCompany,
	_CellNameLowerName[278:295]: CellNameCompany,
	_CellNameName[295:312]:      CellNameCountry,
	_CellNameLowerName[295:312]: CellNameCountry,
}

var _CellNameNames = []string{
	_CellNameName[0:16],
	_CellNameName[16:33],
	_CellNameName[33:66],
	_CellNameName[66:94],
	_CellNameName[94:121],
	_CellNameName[121:149],
	_CellNameName[149:174],
	_CellNameName[174:200],
	_CellNameName[200:229],
	_CellNameName[229:245],
	_CellNameName[245:262],
	_CellNameName[262:278],
	_CellNameName[278:295],
	_CellNameName[295:312],
}

// CellNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CellNameString(s string) (CellName, error) {
	if val, ok := _CellNameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CellNameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CellName values", s)
}

// CellNameValues returns all values of the enum
func CellNameValues() []CellName {
	return _CellNameValues
}

// CellNameStrings returns a slice of all String values of the enum
func CellNameStrings() []string {
	strs := make([]string, len(_CellNameNames))
	copy(strs, _CellNameNames)
	return strs
}

// IsACellName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CellName) IsACellName() bool {
	for _, v := range _CellNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CellName
func (i CellName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CellName
func (i *CellName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CellName should be a string, got %s", data)
	}

	var err error
	*i, err = CellNameString(s)
	return err
}
